// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  superadmin
  admin
  user
}
model User {
  id            String    @id @default(cuid())
  name          String? @db.VarChar(100)
  lastname      String? @db.VarChar(100)
  email         String @db.VarChar(256) @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role Role @default(user)
  points Int @default(0)
  accounts      Account[]
  sessions      Session[]
  Review Review[]
  Wishlist Wishlist?
  Cart Cart?
  Order Order[]
  Address Address[]
}
model Address{
  id Int @id @default(autoincrement())
  street String @db.VarChar(300)
  streetTwo String? @db.VarChar(200)
  zip String @db.VarChar(50)
  city String @db.VarChar(50)
  state String @db.VarChar(50)
  country String @db.VarChar(50)
  userId String
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

}
model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}
model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Category{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(100)
  description String @db.VarChar(100)
  image String?
  Subcategory Subcategory[]
}
model Subcategory{
  id Int @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(100)
  image String?
  categoryId Int
  Category Category @relation(fields:[categoryId], references:[id], onDelete: Cascade)
  Product Product[]
}
model Product{
  id Int @id @default(autoincrement())
  name String @db.VarChar(200)
  description String @db.VarChar(500)
  image String?
  SubCategory Subcategory[]
  new Boolean @default(false)
  Product_variation Product_variation[]
  Product_attribute Product_attribute[]
}
model Variation{
  id Int @id @default(autoincrement())
  name String @db.VarChar(150)
  image String?
  description String @db.VarChar(500)
  Product_variation Product_variation[]
}
model Product_variation{
  variationId Int 
  productId Int
  name String @db.VarChar(200)
  image String?
  price Float
  Variation Variation @relation(fields:[variationId],references:[id],onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  Review Review[]
  Wishlist_product_variation Wishlist_product_variation[]
  Cart_item Cart_item[]
  @@id([variationId, productId])
}
model Attribute{
   id Int @id @default(autoincrement())
   name String @db.VarChar(120)
   Product_attribute Product_attribute[]
}
model Product_attribute{
  attributeId Int
  productId Int
  name String @db.VarChar(120)
  Attribute Attribute @relation(fields: [attributeId], references:[id], onDelete: Cascade)
  Product Product @relation(fields:[productId], references:[id],onDelete:Cascade)
  @@id([attributeId,productId])

}
model Review{
  id Int @id @default(autoincrement())
  content String @db.VarChar(1000)
  rating Float
  userId String
  variationId Int
  productId Int
  User User @relation(fields:[userId],references:[id],onDelete: Cascade)
  productVariation Product_variation @relation(fields: [variationId, productId], references: [variationId, productId])
  @@unique([userId, variationId, productId])
}
model Wishlist{
  id Int @id @default(autoincrement())
  userId String @unique
  User User @relation(fields:[userId],references: [id],onDelete: Cascade)
}
model Wishlist_product_variation{
  wishlistId Int
  variationId Int
  productId Int
  productVariation Product_variation @relation(fields: [variationId, productId], references: [variationId, productId])
  @@id([wishlistId,variationId,productId])
}
model Cart{
  id Int @id @default(autoincrement())
  userId String @unique
  updatedAt DateTime @updatedAt
  User User @relation(fields:[userId], references: [id], onDelete: Cascade)
  Cart_item Cart_item[]
  Order Order?
}
model Cart_item{
  cartId Int
  variationId Int
  productId Int
  productVariation Product_variation @relation(fields: [variationId, productId], references: [variationId, productId])
  quantity Int @default(1)
  Cart Cart @relation(fields: [cartId], references: [id],onDelete: Cascade)
  @@id([cartId,productId,variationId])
}
enum Order_status{
  created 
  payed
  shipped
  finished
  awaiting_review
  review_left
  canceled
}
model Order{
  id String @id
  status Order_status @default(created)
  userId String
  cartId Int @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Transaction Transaction?
}
enum Transaction_status{
  awaiting
  payed
  completed
  canceled
}
model Transaction{
  id String @id
  status Transaction_status @default(awaiting)
  orderId String @unique
  amount Float
  payment_method String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order Order @relation(fields:[orderId],references: [id],onDelete: Cascade)
}